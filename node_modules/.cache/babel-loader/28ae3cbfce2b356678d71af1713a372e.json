{"ast":null,"code":"export const values = {\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1600\n};\nexport const keys = ['sm', 'md', 'lg', 'xl'];\nconst step = 5;\nconst unit = 'px';\nexport function up(key) {\n  const value = typeof key === 'number' ? key : values[key];\n  return `@media (min-width:${value}${unit})`;\n}\nexport function down(key) {\n  if (typeof key === 'number') {\n    return `@media (max-width:${key - step / 100}${unit})`;\n  }\n\n  const endIndex = keys.indexOf(key);\n  const upperbound = values[keys[endIndex]];\n\n  if (endIndex === keys.length) {\n    // down from the biggest breakpoint applies to all sizes\n    return up('sm');\n  }\n\n  return `@media (max-width:${upperbound - step / 100}${unit})`;\n}\nexport function between(start, end) {\n  const startValue = typeof start !== 'number' ? values[start] : start;\n  const endValue = typeof end !== 'number' ? values[end] : end;\n  const endIndex = typeof end !== 'number' ? keys.indexOf(end) : -1;\n\n  if (startValue > endValue) {\n    throw new Error('End value must be greater than Start value');\n  }\n\n  return `@media (min-width:${startValue}${unit}) and ` + `(max-width:${(endIndex !== -1 ? values[keys[endIndex]] : endValue) - step / 100}${unit})`;\n}\nexport function only(key) {\n  if (keys.indexOf(key) + 1 < keys.length) {\n    return between(key, keys[keys.indexOf(key) + 1]);\n  }\n\n  return up(key);\n}\nexport function width(key) {\n  return values[key];\n}","map":{"version":3,"sources":["C:/Users/rbasu/Desktop/Trabajos/Iotek/Iotek Web/iOTEK/iotek/src/utils/theming/breakpoints/utils.ts"],"names":["values","sm","md","lg","xl","xxl","keys","step","unit","up","key","value","down","endIndex","indexOf","upperbound","length","between","start","end","startValue","endValue","Error","only","width"],"mappings":"AAEA,OAAO,MAAMA,MAAwB,GAAG;AACpCC,EAAAA,EAAE,EAAE,GADgC;AAEpCC,EAAAA,EAAE,EAAE,GAFgC;AAGpCC,EAAAA,EAAE,EAAE,GAHgC;AAIpCC,EAAAA,EAAE,EAAE,IAJgC;AAKpCC,EAAAA,GAAG,EAAE;AAL+B,CAAjC;AAQP,OAAO,MAAMC,IAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAA3B;AAEP,MAAMC,IAAI,GAAG,CAAb;AAEA,MAAMC,IAAI,GAAG,IAAb;AAEA,OAAO,SAASC,EAAT,CAAYC,GAAZ,EAAsC;AACzC,QAAMC,KAAK,GAAG,OAAOD,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCV,MAAM,CAACU,GAAD,CAApD;AAEA,SAAQ,qBAAoBC,KAAM,GAAEH,IAAK,GAAzC;AACH;AAED,OAAO,SAASI,IAAT,CAAcF,GAAd,EAAwC;AAC3C,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,WAAQ,qBAAoBA,GAAG,GAAGH,IAAI,GAAG,GAAI,GAAEC,IAAK,GAApD;AACH;;AACD,QAAMK,QAAQ,GAAGP,IAAI,CAACQ,OAAL,CAAaJ,GAAb,CAAjB;AACA,QAAMK,UAAU,GAAGf,MAAM,CAACM,IAAI,CAACO,QAAD,CAAL,CAAzB;;AAEA,MAAIA,QAAQ,KAAKP,IAAI,CAACU,MAAtB,EAA8B;AAC1B;AACA,WAAOP,EAAE,CAAC,IAAD,CAAT;AACH;;AAED,SAAQ,qBAAoBM,UAAU,GAAGR,IAAI,GAAG,GAAI,GAAEC,IAAK,GAA3D;AACH;AAED,OAAO,SAASS,OAAT,CAAiBC,KAAjB,EAA6CC,GAA7C,EAAuE;AAC1E,QAAMC,UAAU,GAAG,OAAOF,KAAP,KAAiB,QAAjB,GAA4BlB,MAAM,CAACkB,KAAD,CAAlC,GAA4CA,KAA/D;AACA,QAAMG,QAAQ,GAAG,OAAOF,GAAP,KAAe,QAAf,GAA0BnB,MAAM,CAACmB,GAAD,CAAhC,GAAwCA,GAAzD;AAEA,QAAMN,QAAQ,GAAG,OAAOM,GAAP,KAAe,QAAf,GAA0Bb,IAAI,CAACQ,OAAL,CAAaK,GAAb,CAA1B,GAA8C,CAAC,CAAhE;;AAEA,MAAIC,UAAU,GAAGC,QAAjB,EAA2B;AACvB,UAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAED,SACK,qBAAoBF,UAAW,GAAEZ,IAAK,QAAvC,GACC,cAAa,CAACK,QAAQ,KAAK,CAAC,CAAd,GAAkBb,MAAM,CAACM,IAAI,CAACO,QAAD,CAAL,CAAxB,GAA2CQ,QAA5C,IAAwDd,IAAI,GAAG,GAC5E,GAAEC,IAAK,GAHZ;AAKH;AAED,OAAO,SAASe,IAAT,CAAcb,GAAd,EAA+B;AAClC,MAAIJ,IAAI,CAACQ,OAAL,CAAaJ,GAAb,IAAoB,CAApB,GAAwBJ,IAAI,CAACU,MAAjC,EAAyC;AACrC,WAAOC,OAAO,CAACP,GAAD,EAAMJ,IAAI,CAACA,IAAI,CAACQ,OAAL,CAAaJ,GAAb,IAAoB,CAArB,CAAV,CAAd;AACH;;AAED,SAAOD,EAAE,CAACC,GAAD,CAAT;AACH;AAED,OAAO,SAASc,KAAT,CAAed,GAAf,EAAgC;AACnC,SAAOV,MAAM,CAACU,GAAD,CAAb;AACH","sourcesContent":["import { Breakpoint, BreakpointValues } from './breakpoint.interfaces'\r\n\r\nexport const values: BreakpointValues = {\r\n    sm: 576,\r\n    md: 768,\r\n    lg: 992,\r\n    xl: 1200,\r\n    xxl: 1600,\r\n}\r\n\r\nexport const keys: Breakpoint[] = ['sm', 'md', 'lg', 'xl']\r\n\r\nconst step = 5\r\n\r\nconst unit = 'px'\r\n\r\nexport function up(key: Breakpoint | number) {\r\n    const value = typeof key === 'number' ? key : values[key]\r\n\r\n    return `@media (min-width:${value}${unit})`\r\n}\r\n\r\nexport function down(key: Breakpoint | number) {\r\n    if (typeof key === 'number') {\r\n        return `@media (max-width:${key - step / 100}${unit})`\r\n    }\r\n    const endIndex = keys.indexOf(key)\r\n    const upperbound = values[keys[endIndex]]\r\n\r\n    if (endIndex === keys.length) {\r\n        // down from the biggest breakpoint applies to all sizes\r\n        return up('sm')\r\n    }\r\n\r\n    return `@media (max-width:${upperbound - step / 100}${unit})`\r\n}\r\n\r\nexport function between(start: Breakpoint | number, end: Breakpoint | number) {\r\n    const startValue = typeof start !== 'number' ? values[start] : start\r\n    const endValue = typeof end !== 'number' ? values[end] : end\r\n\r\n    const endIndex = typeof end !== 'number' ? keys.indexOf(end) : -1\r\n\r\n    if (startValue > endValue) {\r\n        throw new Error('End value must be greater than Start value')\r\n    }\r\n\r\n    return (\r\n        `@media (min-width:${startValue}${unit}) and ` +\r\n        `(max-width:${(endIndex !== -1 ? values[keys[endIndex]] : endValue) - step / 100\r\n        }${unit})`\r\n    )\r\n}\r\n\r\nexport function only(key: Breakpoint) {\r\n    if (keys.indexOf(key) + 1 < keys.length) {\r\n        return between(key, keys[keys.indexOf(key) + 1])\r\n    }\r\n\r\n    return up(key)\r\n}\r\n\r\nexport function width(key: Breakpoint) {\r\n    return values[key]\r\n}"]},"metadata":{},"sourceType":"module"}